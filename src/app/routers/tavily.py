"""
tavily.py

Defines the Tavily summarization API endpoints for a microservices-based FastAPI application.

This module exposes a POST endpoint at `/tavily/summarize` that allows an active, verified user
to submit a query, expand it using AI, perform a Tavily search, and generate a summary from 
the search results using a large language model (LLM). The endpoint is protected by authentication
and uses dependency injection for search and summarization services.

Attributes:
    logger (logging.Logger): Module-level logger for search result logging.
    router (APIRouter): FastAPI API router instance for Tavily endpoints.

Dependencies:
    - TavilySearchPort: Adapter interface for performing searches.
    - TavilySummaryService: Service for query expansion and summarization.
    - ContextItem, SummarizeRequest, SummarizeResponse: Pydantic schemas.
    - fastapi_users: Handles user authentication and role requirements.

Routes:
    POST /tavily/summarize:
        Expands a user query, searches Tavily, logs raw result contents,
        and summarizes findings into a structured response.

Security:
    - Only accessible to authenticated, active, and verified users.

Example:
    See OpenAPI docs generated by FastAPI for input and output schema details.
"""

from fastapi import APIRouter, Depends
from typing import List
import logging

from app.dependencies import get_tavily_adapter, get_tavily_summary_service
from app.ports.tavily_search_port import TavilySearchPort
from app.services.tavily_summarize_service import TavilySummaryService
from app.schemas import ContextItem, SummarizeRequest, SummarizeResponse
from app.auth.router import fastapi_users

logger = logging.getLogger(__name__)
current_active_user = fastapi_users.current_user(active=True, verified=True)

router = APIRouter(
    prefix="/tavily",
    tags=["tavily"],
    dependencies=[Depends(current_active_user)],
)

@router.post("/summarize", response_model=SummarizeResponse)
async def tavily_summarize(
    req: SummarizeRequest,
    adapter: TavilySearchPort = Depends(get_tavily_adapter),
    summarizer: TavilySummaryService = Depends(get_tavily_summary_service),
):
    expanded_query = await summarizer.expand_query(query=req.query)
    raw = await adapter.search(query=expanded_query, top_k=req.top_k)
    print(raw)
    contexts = [
    ContextItem(
        title=ctx["title"],
        url=ctx["url"],
        raw_content=ctx["content"], 
        score=ctx.get("score"),
    )
    for ctx in raw
    ]

    # Correctly log the raw content list
    contents = [c.raw_content or "" for c in contexts]
    print("Tavily search results: %s", contents)

    summary_text = await summarizer.summarize(req.query, contents)

    return SummarizeResponse(
        summary=summary_text,
        expanded_query=expanded_query,
        contexts=contexts,
    )
